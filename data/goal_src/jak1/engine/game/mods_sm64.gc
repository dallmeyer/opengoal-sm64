;;-*-Lisp-*-
(in-package goal)

(define *task-completed-backup* (the-as (array uint32) (new 'static 'array uint32 132
  0 0 0 0 0 0 0 0 0 0 
  0 0 0 0 0 0 0 0 0 0 
  0 0 0 0 0 0 0 0 0 0 
  0 0 0 0 0 0 0 0 0 0 
  0 0 0 0 0 0 0 0 0 0 
  0 0 0 0 0 0 0 0 0 0 
  0 0 0 0 0 0 0 0 0 0 
  0 0 0 0 0 0 0 0 0 0 
  0 0 0 0 0 0 0 0 0 0 
  0 0 0 0 0 0 0 0 0 0 
  0 0 0 0 0 0 0 0 0 0 
  0 0 0 0 0 0 0 0 0 0 
  0 0 0 0 0 0 0 0 0 0
  0 0
  )))

(define game-task-text (the-as (array game-text-id) (new 'static 'array game-text-id 132
    (game-text-id empty) ;; ??? not sure why the fuck the indexing ends up off by 3 here....
    (game-text-id empty) ;; ???
    (game-text-id empty) ;; ???
    (game-text-id empty) ;; (complete 1)
    (game-text-id empty) ;;   (none 0)
  (game-text-id jungle-eggtop) ;;   (jungle-eggtop 2)
  (game-text-id jungle-lurkerm-unblock) ;;   (jungle-lurkerm 3)
  (game-text-id jungle-tower) ;;   (jungle-tower 4)
  (game-text-id jungle-fishgame) ;;   (jungle-fishgame 5)
  (game-text-id jungle-plant) ;;   (jungle-plant 6)
  (game-text-id beach-buzzer) ;;   (jungle-buzzer 7)
  (game-text-id jungle-canyon-end) ;;   (jungle-canyon-end 8)
  (game-text-id jungle-temple-door) ;;   (jungle-temple-door 9)
  (game-text-id village1-yakow-herd) ;;   (village1-yakow 10)
  (game-text-id village1-mayor-money) ;;   (village1-mayor-money 11)
  (game-text-id village1-uncle-money) ;;   (village1-uncle-money 12)
  (game-text-id village1-oracle) ;;   (village1-oracle-money1 13)
  (game-text-id village1-oracle) ;;   (village1-oracle-money2 14)
  (game-text-id beach-ecorocks) ;;   (beach-ecorocks 15)
  (game-text-id beach-pelican) ;;   (beach-pelican 16)
  (game-text-id beach-flutflut-push) ;;   (beach-flutflut 17)
  (game-text-id beach-seagull) ;;   (beach-seagull 18)
  (game-text-id beach-cannon) ;;   (beach-cannon 19)
  (game-text-id beach-buzzer) ;;   (beach-buzzer 20)
  (game-text-id beach-gimmie) ;;   (beach-gimmie 21)
  (game-text-id beach-sentinel) ;;   (beach-sentinel 22)
  (game-text-id misty-muse-catch) ;;   (misty-muse 23)
  (game-text-id misty-boat) ;;   (misty-boat 24)
  (game-text-id misty-return-to-pool) ;;   (misty-warehouse 25)
  (game-text-id misty-cannon) ;;   (misty-cannon 26)
  (game-text-id misty-balloon-lurkers) ;;   (misty-bike 27)
  (game-text-id beach-buzzer) ;;   (misty-buzzer 28)
  (game-text-id misty-bike-jump) ;;   (misty-bike-jump 29)
  (game-text-id misty-eco-challenge) ;;   (misty-eco-challenge 30)
  (game-text-id village2-gambler-money) ;;   (village2-gambler-money 31)
  (game-text-id village2-geologist-money) ;;   (village2-geologist-money 32)
  (game-text-id village2-warrior-money) ;;   (village2-warrior-money 33)
  (game-text-id village2-oracle-money) ;;   (village2-oracle-money1 34)
  (game-text-id village2-oracle-money) ;;   (village2-oracle-money2 35)
  (game-text-id swamp-billy) ;;   (swamp-billy 36)
  (game-text-id swamp-flutflut) ;;   (swamp-flutflut 37)
  (game-text-id swamp-battle) ;;   (swamp-battle 38)
  (game-text-id swamp-tether) ;;   (swamp-tether-1 39)
  (game-text-id swamp-tether) ;;   (swamp-tether-2 40)
  (game-text-id swamp-tether) ;;   (swamp-tether-3 41)
  (game-text-id swamp-tether) ;;   (swamp-tether-4 42)
  (game-text-id generic-buzzer) ;;   (swamp-buzzer 43)
  (game-text-id sunken-platforms) ;;   (sunken-platforms 44)
  (game-text-id sunken-pipe) ;;   (sunken-pipe 45)
  (game-text-id sunken-slide) ;;   (sunken-slide 46)
  (game-text-id sunken-elevator-raise) ;;   (sunken-room 47)
  (game-text-id sunken-pool) ;;   (sunken-sharks 48)
  (game-text-id generic-buzzer) ;;   (sunken-buzzer 49)
  (game-text-id sunken-climb-tube) ;;   (sunken-top-of-helix 50)
  (game-text-id sunken-spinning-room) ;;   (sunken-spinning-room 51)
  (game-text-id rolling-race) ;;   (rolling-race 52)
  (game-text-id rolling-robbers) ;;   (rolling-robbers 53)
  (game-text-id rolling-moles) ;;   (rolling-moles 54)
  (game-text-id rolling-plants) ;;   (rolling-plants 55)
  (game-text-id rolling-lake) ;;   (rolling-lake 56)
  (game-text-id generic-buzzer) ;;   (rolling-buzzer 57)
  (game-text-id rolling-ring-chase-1) ;;   (rolling-ring-chase-1 58)
  (game-text-id rolling-ring-chase-2) ;;   (rolling-ring-chase-2 59)
  (game-text-id snow-eggtop) ;;   (snow-eggtop 60)
  (game-text-id snow-ram-3-left) ;;   (snow-ram 61)
  (game-text-id snow-fort) ;;   (snow-fort 62)
  (game-text-id snow-ball) ;;   (snow-ball 63)
  (game-text-id snow-bunnies) ;;   (snow-bunnies 64)
  (game-text-id village3-buzzer) ;;   (snow-buzzer 65)
  (game-text-id snow-bumpers) ;;   (snow-bumpers 66)
  (game-text-id snow-cage) ;;   (snow-cage 67)
  (game-text-id firecanyon-buzzer) ;;   (firecanyon-buzzer 68)
  (game-text-id firecanyon-end) ;;   (firecanyon-end 69)
  (game-text-id citadel-sage-green) ;;   (citadel-sage-green 70)
  (game-text-id citadel-sage-blue) ;;   (citadel-sage-blue 71)
  (game-text-id citadel-sage-red) ;;   (citadel-sage-red 72)
  (game-text-id citadel-sage-yellow) ;;   (citadel-sage-yellow 73)
  (game-text-id hidden-power-cell) ;;   (village3-extra1 74)
  (game-text-id beach-buzzer) ;;   (village1-buzzer 75)
  (game-text-id generic-buzzer) ;;   (village2-buzzer 76)
  (game-text-id village3-buzzer) ;;   (village3-buzzer 77)
  (game-text-id cave-gnawers) ;;   (cave-gnawers 78)
  (game-text-id cave-dark-crystals) ;;   (cave-dark-crystals 79)
  (game-text-id cave-dark-climb) ;;   (cave-dark-climb 80)
  (game-text-id cave-robot-climb) ;;   (cave-robot-climb 81)
  (game-text-id cave-swing-poles) ;;   (cave-swing-poles 82)
  (game-text-id cave-spider-tunnel) ;;   (cave-spider-tunnel 83)
  (game-text-id cave-platforms) ;;   (cave-platforms 84)
  (game-text-id village3-buzzer) ;;   (cave-buzzer 85)
  (game-text-id ogre-boss) ;;   (ogre-boss 86)
  (game-text-id ogre-end) ;;   (ogre-end 87)
  (game-text-id ogre-buzzer) ;;   (ogre-buzzer 88)
  (game-text-id lavatube-end) ;;   (lavatube-end 89)
  (game-text-id lavatube-buzzer) ;;   (lavatube-buzzer 90)
  (game-text-id citadel-buzzer) ;;   (citadel-buzzer 91)
  (game-text-id training-gimmie-task-name) ;;   (training-gimmie 92)
  (game-text-id training-door-task-name) ;;   (training-door 93)
  (game-text-id training-climb-task-name) ;;   (training-climb 94)
  (game-text-id training-buzzer-task-name) ;;   (training-buzzer 95)
  (game-text-id village3-miner-money) ;;   (village3-miner-money1 96)
  (game-text-id village3-miner-money) ;;   (village3-miner-money2 97)
  (game-text-id village3-miner-money) ;;   (village3-miner-money3 98)
  (game-text-id village3-miner-money) ;;   (village3-miner-money4 99)
  (game-text-id village3-oracle-money) ;;   (village3-oracle-money1 100)
  (game-text-id village3-oracle-money) ;;   (village3-oracle-money2 101)
    (game-text-id empty)  ;; (firecanyon-assistant 102)
    (game-text-id empty)  ;; (village2-levitator 103)
    (game-text-id empty)  ;; (swamp-arm 104)
    (game-text-id empty)  ;; (village3-button 105)
    (game-text-id empty)  ;; (red-eggtop 106)
    (game-text-id empty)  ;; (lavatube-balls 107)
    (game-text-id empty)  ;; (lavatube-start 108)
    (game-text-id empty)  ;; (intro 109)
  (game-text-id hidden-power-cell) ;;   (ogre-secret 110)
    (game-text-id empty)  ;; (village4-button 111)
    (game-text-id empty)  ;; (finalboss-movies 112)
    (game-text-id empty)  ;; (plunger-lurker-hit 113)
    (game-text-id empty)  ;; (leaving-misty 114)
    (game-text-id empty)  ;; (assistant-village3 115)
    (game-text-id empty) ;;   (training-100-orbs 116) ;; unused
    (game-text-id empty) ;;   (village1-100-orbs 117) ;; unused
  (game-text-id beach-100-orbs) ;;   (beach-100-orbs 118)
  (game-text-id jungle-100-orbs) ;;   (jungle-100-orbs 119)
  (game-text-id misty-100-orbs) ;;   (misty-100-orbs 120)
    (game-text-id empty) ;;   (firecanyon-100-orbs 121) ;; unused
    (game-text-id empty) ;;   (village2-100-orbs 122) ;; unused
  (game-text-id sunken-100-orbs) ;;   (sunken-100-orbs 123)
  (game-text-id swamp-100-orbs) ;;   (swamp-100-orbs 124)
  (game-text-id rolling-100-orbs) ;;   (rolling-100-orbs 125)
    (game-text-id empty) ;;   (ogre-100-orbs 126) ;; unused
    (game-text-id empty) ;;   (village3-100-orbs 127) ;; unused
  (game-text-id snow-100-orbs) ;;   (snow-100-orbs 128)
  (game-text-id cave-100-orbs) ;;   (cave-100-orbs 129)
    (game-text-id empty) ;;   (lavatube-100-orbs 130) ;; unused
  (game-text-id citadel-100-orbs) ;;   (citadel-100-orbs 131)
  )))

(define *last-collected-task-text* (game-text-id empty))
(define *last-collected-task-level-idx* -1)
(define *text-ids-seen-backup* (new 'global 'bit-array 4095))
(define *reset-started?* #f)
(defun reset-to-level-start ((tsk game-task))
  (format #t "reset-to-level-start called for task ~A~%" (game-task->string tsk))
  (when (not *reset-started?*)
    (set! *last-collected-task-text* (-> game-task-text (the-as int tsk)))  ;; this is (game-text-id empty) for (game-task none)
    (set! *last-collected-task-level-idx* -1)
    (let ((reset? #t)
          (checkpointName "")
          )
      (case tsk
        (((game-task training-100-orbs) (game-task village1-100-orbs) (game-task beach-100-orbs) (game-task jungle-100-orbs) (game-task misty-100-orbs) (game-task firecanyon-100-orbs) (game-task village2-100-orbs) (game-task sunken-100-orbs) (game-task swamp-100-orbs) (game-task rolling-100-orbs) (game-task ogre-100-orbs) (game-task village3-100-orbs) (game-task snow-100-orbs) (game-task cave-100-orbs) (game-task lavatube-100-orbs) (game-task citadel-100-orbs)
          (game-task firecanyon-buzzer) (game-task firecanyon-end) (game-task ogre-boss) (game-task ogre-end) (game-task ogre-buzzer) (game-task ogre-secret) (game-task lavatube-end) (game-task lavatube-buzzer))
          ;; dont warp on 100 orb cells or connector levels
          (set! reset? #f)
          )
        )
      (case tsk
        (((game-task training-gimmie) (game-task training-door) (game-task training-climb) (game-task training-buzzer))
          (set! checkpointName "training-start")
          (set! *last-collected-task-level-idx* 0)
          )
        (((game-task village1-yakow) (game-task village1-mayor-money) (game-task village1-uncle-money) (game-task village1-oracle-money1) (game-task village1-oracle-money2) (game-task village1-buzzer))
          (set! checkpointName "village1-warp")
          (set! *last-collected-task-level-idx* 1)
          )
        (((game-task beach-ecorocks) (game-task beach-pelican) (game-task beach-flutflut) (game-task beach-seagull) (game-task beach-cannon) (game-task beach-buzzer) (game-task beach-gimmie) (game-task beach-sentinel) (game-task beach-100-orbs))
          (set! checkpointName "beach-start")
          (set! *last-collected-task-level-idx* 2)
          )
        (((game-task jungle-eggtop) (game-task jungle-lurkerm) (game-task jungle-tower) (game-task jungle-fishgame) (game-task jungle-plant) (game-task jungle-buzzer) (game-task jungle-canyon-end) (game-task jungle-temple-door) (game-task jungle-100-orbs))
          (set! checkpointName "jungle-start")
          (set! *last-collected-task-level-idx* 3)
          )
        (((game-task misty-muse) (game-task misty-boat) (game-task misty-warehouse) (game-task misty-cannon) (game-task misty-bike) (game-task misty-buzzer) (game-task misty-bike-jump) (game-task misty-eco-challenge) (game-task misty-100-orbs))
          (set! checkpointName "misty-start")
          (set! *last-collected-task-level-idx* 4)
          )
        (((game-task firecanyon-buzzer) (game-task firecanyon-end))
          (set! checkpointName "firecanyon-start")  ;; always ignored
          (set! *last-collected-task-level-idx* 5)
          )
        (((game-task village2-gambler-money) (game-task village2-geologist-money) (game-task village2-warrior-money) (game-task village2-oracle-money1) (game-task village2-oracle-money2) (game-task village2-buzzer))
          (set! checkpointName "village2-warp")
          (set! *last-collected-task-level-idx* 6)
          )
        (((game-task sunken-platforms) (game-task sunken-pipe) (game-task sunken-slide) (game-task sunken-room) (game-task sunken-sharks) (game-task sunken-buzzer) (game-task sunken-top-of-helix) (game-task sunken-spinning-room) (game-task sunken-100-orbs))
          (set! checkpointName "sunken-start")
          (set! *last-collected-task-level-idx* 7)
          )
        (((game-task swamp-billy) (game-task swamp-flutflut) (game-task swamp-battle) (game-task swamp-tether-1) (game-task swamp-tether-2) (game-task swamp-tether-3) (game-task swamp-tether-4) (game-task swamp-buzzer) (game-task swamp-100-orbs))
          (set! checkpointName "swamp-start")
          (set! *last-collected-task-level-idx* 8)
          )
        (((game-task rolling-race) (game-task rolling-robbers) (game-task rolling-moles) (game-task rolling-plants) (game-task rolling-lake) (game-task rolling-buzzer) (game-task rolling-ring-chase-1) (game-task rolling-ring-chase-2) (game-task rolling-100-orbs))
          (set! checkpointName "rolling-start")
          (set! *last-collected-task-level-idx* 9)
          )
        (((game-task ogre-boss) (game-task ogre-end) (game-task ogre-buzzer) (game-task ogre-secret))
          (set! checkpointName "ogre-start")  ;; always ignored
          (set! *last-collected-task-level-idx* 10)
          )
        (((game-task village3-miner-money1) (game-task village3-miner-money2) (game-task village3-miner-money3) (game-task village3-miner-money4) (game-task village3-oracle-money1) (game-task village3-oracle-money2) (game-task village3-extra1) (game-task village3-buzzer))
          (set! checkpointName "village3-warp")
          (set! *last-collected-task-level-idx* 11)
          )
        (((game-task snow-eggtop) (game-task snow-ram) (game-task snow-fort) (game-task snow-ball) (game-task snow-bunnies) (game-task snow-buzzer) (game-task snow-bumpers) (game-task snow-cage) (game-task snow-100-orbs))
          (set! checkpointName "snow-start")
          (set! *last-collected-task-level-idx* 12)
          )
        (((game-task cave-gnawers) (game-task cave-dark-crystals) (game-task cave-dark-climb) (game-task cave-robot-climb) (game-task cave-swing-poles) (game-task cave-spider-tunnel) (game-task cave-platforms) (game-task cave-buzzer) (game-task cave-100-orbs))
          (set! checkpointName "maincave-start")
          (set! *last-collected-task-level-idx* 13)
          )
        (((game-task lavatube-end) (game-task lavatube-buzzer))
          (set! checkpointName "lavatube-start")  ;; always ignored
          (set! *last-collected-task-level-idx* 14)
          )
        (((game-task citadel-sage-green) (game-task citadel-sage-blue) (game-task citadel-sage-red) (game-task citadel-sage-yellow) (game-task citadel-buzzer) (game-task citadel-100-orbs))
          (set! checkpointName "citadel-start")
          (set! *last-collected-task-level-idx* 15)
          )
        (((game-task none))
          (format #t "resetting due to death, based on cur level~%")
          (case (-> *target* current-level name)
            (('training)
              (set! checkpointName "training-start")
              )
            (('village1)
              (set! checkpointName "village1-warp")
              )
            (('beach)
              (set! checkpointName "beach-start")
              )
            (('jungle 'jungleb)
              (set! checkpointName "jungle-start")
              )
            (('misty)
              (set! checkpointName "misty-start")
              )
            (('firecanyon)
              (set! checkpointName "firecanyon-start")
              )
            (('village2)
              (set! checkpointName "village2-warp")
              )
            (('sunken 'sunkenb)
              (set! checkpointName "sunken-start")
              )
            (('swamp)
              (set! checkpointName "swamp-start")
              )
            (('rolling)
              (set! checkpointName "rolling-start")
              )
            (('ogre)
              (set! checkpointName "ogre-start")
              )
            (('village3)
              (set! checkpointName "village3-warp")
              )
            (('snow)
              (set! checkpointName "snow-start")
              )
            (('darkcave 'maincave 'robocave)
              (set! checkpointName "maincave-start")
              )
            (('lavatube)
              (set! checkpointName "lavatube-start")
              )
            (('citadel)
              (set! checkpointName "citadel-start")
              )
            (('finalboss)
              (if (-> *pc-settings* finalboss-fix?)
                (set! checkpointName "finalboss-start")
                (set! checkpointName "training-start")
                )
              )
            (else
              (set! checkpointName "training-start")
              )
            )
          )
        )
        
      (format #t "~S fuel cell anim warp ~A -> ~S~%" (game-task->string tsk) (-> *target* current-level name) checkpointName)

      (when reset?     
        (set! *reset-started?* #t)

        ;; backup hints seen
        (clear-all! *text-ids-seen-backup*)
        (dotimes (idx (-> *game-info* text-ids-seen length))
          (if (get-bit (-> *game-info* text-ids-seen) idx)
            (set-bit *text-ids-seen-backup* idx)
            )
          )
          
        ;; backup task statuses in bitmask
        (let* ((idx (the int (game-task jungle-eggtop)))
              (max (the int (game-task max)))
              )
          (while (> (the-as uint max) (the-as uint idx))
            (set! (-> *task-completed-backup* idx) 0)
            (if (and (task-exists? (the-as game-task idx) (task-status need-hint)) (task-closed? (the-as game-task idx) (task-status need-hint)))
              (logior! (-> *task-completed-backup* idx) (ash 1 (task-status need-hint)))
              )
            (if (and (task-exists? (the-as game-task idx) (task-status need-introduction)) (task-closed? (the-as game-task idx) (task-status need-introduction)))
              (logior! (-> *task-completed-backup* idx) (ash 1 (task-status need-introduction)))
              )
            (if (and (task-exists? (the-as game-task idx) (task-status need-reminder-a)) (task-closed? (the-as game-task idx) (task-status need-reminder-a)))
              (logior! (-> *task-completed-backup* idx) (ash 1 (task-status need-reminder-a)))
              )
            (if (and (task-exists? (the-as game-task idx) (task-status need-reminder)) (task-closed? (the-as game-task idx) (task-status need-reminder)))
              (logior! (-> *task-completed-backup* idx) (ash 1 (task-status need-reminder)))
              )
            (if (and (task-exists? (the-as game-task idx) (task-status need-reward-speech)) (task-closed? (the-as game-task idx) (task-status need-reward-speech)))
              (logior! (-> *task-completed-backup* idx) (ash 1 (task-status need-reward-speech)))
              )
            (if (and (task-exists? (the-as game-task idx) (task-status need-resolution)) (task-closed? (the-as game-task idx) (task-status need-resolution)))
              (logior! (-> *task-completed-backup* idx) (ash 1 (task-status need-resolution)))
              )
            (+! idx 1)
            )
          )
          
        ;; new game
        (initialize! *game-info* 'game (the-as game-save #f) checkpointName)
        )

      (when (not reset?)
        (activate-orb-all -1)
        )
      )
    )
  (none)
  )

(defun restore-completed-tasks ()
  (format #t "restore-completed-tasks called~%")
  (when *reset-started?*
    ;; reload hints seen
    (clear-all! (-> *game-info* text-ids-seen))
    (dotimes (idx (-> *game-info* text-ids-seen length))
      (if (get-bit *text-ids-seen-backup* idx)
        (set-bit (-> *game-info* text-ids-seen) idx)
        )
      )
      
    ;; reload task statuses from bitmask
    (let* ((idx (the int (game-task jungle-eggtop)))
          (max (the int (game-task max)))
          )
      (while (> (the-as uint max) (the-as uint idx))
        (if (logtest? (-> *task-completed-backup* idx) (ash 1 (task-status need-hint)))
          (close-specific-task! (the game-task idx) (task-status need-hint))
          )
        (if (logtest? (-> *task-completed-backup* idx) (ash 1 (task-status need-introduction)))
          (close-specific-task! (the game-task idx) (task-status need-introduction))
          )
        (if (logtest? (-> *task-completed-backup* idx) (ash 1 (task-status need-reminder-a)))
          (close-specific-task! (the game-task idx) (task-status need-reminder-a))
          )
        (if (logtest? (-> *task-completed-backup* idx) (ash 1 (task-status need-reminder)))
          (close-specific-task! (the game-task idx) (task-status need-reminder))
          )
        (if (logtest? (-> *task-completed-backup* idx) (ash 1 (task-status need-reward-speech)))
          (close-specific-task! (the game-task idx) (task-status need-reward-speech))
          )
        (when (logtest? (-> *task-completed-backup* idx) (ash 1 (task-status need-resolution)))
          (close-specific-task! (the game-task idx) (task-status need-resolution))
          (case (the game-task idx)
            (((game-task firecanyon-assistant) (game-task village2-levitator) (game-task swamp-arm) (game-task village3-button)
            (game-task red-eggtop) (game-task lavatube-balls) (game-task lavatube-start) (game-task intro) (game-task village4-button) 
            (game-task finalboss-movies)  (game-task plunger-lurker-hit) (game-task leaving-misty) (game-task assistant-village3))
              ;; do nothing for non-cell tasks
              (none)
              )
            (else       
              ;; cell pickup
              (format #t "giving cell ~A~%" (game-task->string (the game-task idx)))
              (send-event *target* 'get-pickup (pickup-type fuel-cell) (the float idx))
              )
            )
          )

        ;; reset task backup
        (set! (-> *task-completed-backup* idx) 0)
        (+! idx 1)
        )
      )
    (activate-orb-all -1)
    (set! *reset-started?* #f)
    )
  (none)
  )